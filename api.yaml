openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
         type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64 // в виде целочисленного значения минимальной размерности валюты (например, центы или копейки)
        image_link:
          type: string
    Order:
      type: object
      properties:
        order_id:
          type: integer
          format: int32
        item_id:
          type: integer
          format: int32
        item_name:
          type: string
        price:
          type: integer
          format: int64
        qty:
          type: integer
          format: int32
        amount:
          type: integer
          format: int64
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: { }
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: { }
  /items:
    post:
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      requestBody:
        description: "Item object that needs to be added to the store"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "405":
          description: "Invalid input"
      security:
        - api_key: [ ]
    get:
      summary: Item`s list with price filter
      operationId: ItemList
      parameters:
        - name: price_min_to_max
          in: query
          description: Price list organized from Min to Max
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max_to_min
          in: query
          description: Price list organized from Max to Min
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        4XX:
          description: Invalid
          content: { }
  /items/upload_image:
    post:
      summary: "uploads an image"
      operationId: "uploadFile"
      parameters:
        - name: "additionalMetadata"
          in: "header"
          description: "Additional data to pass to server"
          required: true
        - name: "file"
          in: "header"
          description: "file to upload"
          required: true
      responses:
        '200':
          description: returned
      security:
      - api_key: [ ]
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: { }
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - api_key: [ ]
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Item not found
          content: { }
      security:
        - api_key: [ ]
  /order:
    summary: "working with order"
    post:
      summary: "Create a new order"
      operationId: CreateOrder
      requestBody:
        description: "Order structure"
        content:
          applocation/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: ok
        4XX:
          description: Invalid order
    get:
      summary: "Get Order object"
      operationId: GetOrder
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '/components/schemas/Order'
        400:
          description: Incorrect ID
          content: { }
        404:
          description: Order is not found
          content: { }
    delete:
      summary: "Delete order"
      operationId: DeleteOrder
      parameters:
        - name: order_id
          in: path
          description: delete order_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Incorrect ID
          content: { }
        404:
          description: Order is not found
          content: { }
